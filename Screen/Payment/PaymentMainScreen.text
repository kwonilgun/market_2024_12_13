/*
 * File: Confirm.tsx
 * Project: my-app
 * File Created: Saturday, 28th January 2023 2:56:54 pm
 * Author: Kwonilgun(권일근) (kwonilgun@naver.com)
 * -----
 * Last Modified: Friday, 3rd February 2023 9:20:19 pm
 * Modified By: Kwonilgun(권일근) (kwonilgun@naver.com>)
 * -----
 * Copyright <<projectCreationYear>> - 2023 루트원 AI, 루트원 AI
 * -----
 * .2023-02-03 : useEffect에서 [props.route.params] 변화가 있을 때 실행을 하도록 수정함.
 * 2023-05-09 : 멀티 배송지 처리를 추가함.
 * 2023-08-27 : oneTouch메세지 전송을 추가
 * 2023-09-16 : 메세지 송부 후에 메세지 박스에서 백 키로 돌아오는 버그 수정
 */

import React, { useCallback, useContext, useRef, useState } from 'react';
import {
  View,
  Text,
  Button,
  ScrollView,
  Dimensions,
  TouchableOpacity,
  Alert,
  StyleSheet,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useFocusEffect } from '@react-navigation/native';
import axios from 'axios';
import { connect } from 'react-redux';
import * as actions from '../../../Redux/Actions/cartActions';
import { ToastShowFt } from '../../../Shared/Alert/ToastShowFt';
import { baseURL } from '../../../assets/common/baseUrl';
import deliveries from '../../../assets/delivery.json';
import AuthGlobal from '../../../Context/store/AuthGlobal';
import moment from 'moment';
import { LOG } from '../../../Log/reactLogger';
import { badgeStyle } from '../../../Shared/Util/BadgeStyle';
import { returnDashNumber } from '../../../Shared/Util/insertDashNumber';
import { devLOGError, devLOGInfo } from '../../../Shared/debug/devLOGInfo';
import isEmpty from '../../../assets/common/isEmpty';
import TransferSheet from './BottomSheet/TransferSheet';
import { ORDERED_PRODUCT } from '../../../assets/common/baseValues';

moment.locale('ko');

const { width } = Dimensions.get('window');

type ConfirmProps = {
  cartItems: any[];
  navigation: any;
  clearCart: () => void;
  removeFromCart: (item: any) => void;
};

type DeliveryItem = {
  name: string;
  address1: string;
  address2: string;
  phone: string;
  deliveryMethod: string;
  checkMark: boolean;
};

const Confirm: React.FC<ConfirmProps> = (props) => {
  const context = useContext(AuthGlobal);
  const modalRef = useRef<any>(null);

  const [totalPayment, setTotalPayment] = useState<number | undefined>();
  const [buyer, setBuyer] = useState<any>();
  const [producer, setProducer] = useState<any>();
  const [deliveryFilteredList, setDeliveryFilteredList] = useState<DeliveryItem[]>([]);
  const [transMoney, setTransMoney] = useState<string>('');
  const [startChat, setStartChat] = useState<boolean>(false);
  const [goPayment, setGoPayment] = useState<boolean>(false);

  const userId = useRef<string | undefined>();

  useFocusEffect(
    useCallback(() => {
      if (context.stateUser.isAuthenticated) {
        userId.current = context.stateUser.user.userId;
      } else {
        props.navigation.navigate('Cart Menu');
        ToastShowFt('error', '로그인을 먼저 하세요');
        return;
      }

      AsyncStorage.getItem('deliveryList')
        .then((data) => {
          const deliveryList = JSON.parse(data || '[]') as DeliveryItem[];
          if (!isEmpty(deliveryList)) {
            const filteredList = deliveryList.filter((item) => item.checkMark);

            let sum = 0;
            props.cartItems.forEach((item) => {
              sum += item.product.price * item.quantity;
            });

            setTotalPayment(sum * filteredList.length);
            setDeliveryFilteredList(filteredList);

            fetchProducerInform(userId, setBuyer);
          } else {
            devLOGError('Confirm.tsx : filteredList가 없다.....');
          }
        })
        .catch((e) => {
          devLOGError('Confirm.tsx: deliveryList 로컬 스토리지가 없다. ');
        });

      return () => {
        setBuyer(null);
        setGoPayment(false);
        setStartChat(false);
      };
    }, [props.cartItems])
  );

  const generateOrderNumber = (): string => {
    const date = new Date();
    const year = date.getFullYear();
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const day = date.getDate().toString().padStart(2, '0');
    const randomNum = Math.floor(Math.random() * 1000000)
      .toString()
      .padStart(4, '0');

    return `${year}${month}${day}-${randomNum}`;
  };

  const confirmOrder = async () => {
    LOG.info('Confirm.tsx: confirmOrder');

    const m_uid = generateOrderNumber();

    const orderLists = Promise.all(
      deliveryFilteredList.map(async (item) => {
        const order = {
          ...item,
          orderItems: props.cartItems,
          orderNumber: m_uid,
          isPaid: false,
          user: context.stateUser.user.userId,
          buyerName: buyer?.nickName,
          buyerPhone: buyer?.phone,
          status: '3',
          dateOrdered: moment().format(),
        };

        const data = await axios.post(`${baseURL}orders`, order);
        return data;
      })
    );

    await orderLists;

    props.navigation.navigate('IamPay', {
      params: {
        pg: 'html5_inicis.MOI8687972',
        pay_method: 'card',
        buyer_tel: buyer?.phone,
        buyer_name: buyer?.nickName,
        buyer_email: 'kwonilgun@naver.com',
        merchant_uid: m_uid,
        amount: totalPayment?.toString(),
        name: '지경터 사과',
        app_scheme: 'exampleforrn',
        m_redirect_url: 'http://detectchangingwebview/iamport/rn',
      },
    });
  };

  const gotoOrderedList = () => {
    props.navigation.navigate('User Main', 'User Profile');
  };

  const deliveryCard = (index: number, item: DeliveryItem) => (
    <View key={index} style={styles.deliveryCard}>
      <Text style={styles.deliveryText}>배송지 주소:</Text>
      <Text style={styles.deliveryDetail}>{item.name}</Text>
      <Text style={styles.deliveryDetail}>{item.address1}</Text>
      <Text style={styles.deliveryDetail}>{item.address2}</Text>
      <Text>{returnDashNumber(item.phone)}</Text>
      <Text>{deliveries[item.deliveryMethod]?.name}</Text>
    </View>
  );

  return (
    <>
      <View>
        <Text style={styles.logoTitle}>루트원 마켓</Text>
      </View>

      {props.cartItems.length !== 0 ? (
        <>
          <TransferSheet
            modalRef={modalRef}
            item={producer}
            transMoney={transMoney}
            dProps={props}
          />
          <ScrollView style={styles.scrollView}>
            <View style={styles.container}>
              <Text style={styles.heading}>주문 내역:</Text>

              {props.cartItems.map((item, index) => {
                const amount =
                  Number(item.product.price) *
                  (100 - Number(item.product.discount || 0)) *
                  0.01 *
                  item.quantity *
                  deliveryFilteredList.length;

                const productId = item.product.id;

                return (
                  <View key={index} style={styles.orderCard}>
                    <Text style={styles.productText}>상품: {item.product.brand || ''}</Text>
                    <View style={styles.orderDetailsRow}>
                      <Text style={styles.productText}>수량: {item.quantity * deliveryFilteredList.length}</Text>
                      <Text style={styles.productText}>송금할 금액: {amount}원</Text>
                    </View>

                    <View style={styles.actionsRow}>
                      <TouchableOpacity
                        onPress={() =>
                          Alert.alert(
                            '최종 확인',
                            ' 생산자와 직접 대화를 진행하시겠습니까?',
                            [
                              { text: '취소', style: 'cancel' },
                              { text: '확인', onPress: () => startChatting(item.product.user, '') },
                            ]
                          )
                        }
                        style={styles.badgeStyle}
                      >
                        <Text>채팅</Text>
                      </TouchableOpacity>
                      <TouchableOpacity
                        onPress={() => {
                          setProducer(item);
                          setTransMoney(String(amount));
                          modalRef.current?.open();
                        }}
                        style={styles.badgeStyle}
                      >
                        <Text>생산자 계좌</Text>
                      </TouchableOpacity>
                      <TouchableOpacity
                        onPress={() =>
                          Alert.alert(
                            '송금을 완료하셨습니까?',
                            ' 생산자에게
