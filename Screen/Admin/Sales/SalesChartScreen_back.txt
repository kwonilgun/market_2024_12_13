/* eslint-disable react-native/no-inline-styles */
/* eslint-disable react/no-unstable-nested-components */
import React, { useCallback, useMemo, useRef, useState } from 'react';
import {
  Dimensions, StyleSheet, TouchableOpacity
} from 'react-native';
import WrapperContainer from '../../../utils/basicForm/WrapperContainer';
import HeaderComponent from '../../../utils/basicForm/HeaderComponents';
import { RFPercentage } from 'react-native-responsive-fontsize';
import FontAwesome from 'react-native-vector-icons/FontAwesome';
import colors from '../../../styles/colors';
import { useFocusEffect } from '@react-navigation/native';

import LoadingWheel from '../../../utils/loading/LoadingWheel';

import axios, { AxiosResponse } from 'axios';

import * as echarts from 'echarts/core';
import { LineChart } from 'echarts/charts';
import { GridComponent } from 'echarts/components';
import { SkiaRenderer, SkiaChart } from '@wuba/react-native-echarts';

import { baseURL } from '../../../assets/common/BaseUrl';


import { getToken } from '../../../utils/getSaveToken';
import { SalesChartScreenProps } from '../../model/types/TSalesNavigator';
import { alertMsg } from '../../../utils/alerts/alertMsg';
import strings from '../../../constants/lang';


// 판매 데이터의 타입을 정의합니다.
interface SalesData {
  date: string; // 날짜
  total_sales: number; // 총 판매액
}

echarts.use([SkiaRenderer, LineChart, GridComponent]);

const SalesChartScreen: React.FC<SalesChartScreenProps> = props => {
  const [loading, setLoading] = useState<boolean>(false);

  const skiaRef = useRef<any>(null);

  // 판매 데이터를 상태로 관리합니다.
  const [salesData, setSalesData] = useState<SalesData[]>([]);


  useFocusEffect(
    useCallback(() => {
      console.log('SalesChartScreen : useFocusEffect');
      // fetchSalesData();
      const option = {
        xAxis: {
          type: 'category',
          data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
        },
        yAxis: {
          type: 'value',
        },
        series: [
          {
            data: [150, 230, 224, 218, 135, 147, 260],
            type: 'line',
          },
        ],
      };
      let chart: any;
      if (skiaRef.current) {
        chart = echarts.init(skiaRef.current, 'light', {
          renderer: 'skia',
          width: 400,
          height: 400,
        });
        chart.setOption(option);
      }
      return () => chart?.dispose();
    }, []),
  );

  // 컴포넌트가 마운트될 때 API에서 데이터를 가져옵니다.
  const fetchSalesData = async () => {
    try {
          const token = await getToken();
          const response: AxiosResponse = await axios.get(
            `${baseURL}sales/summary`,
            {
              headers: {Authorization: `Bearer ${token}`},
            },
          );

          if(response.status === 200){
            console.log('sales data from AWS', response.data);
            if (Array.isArray(response.data)) {
              setSalesData(response.data);
            } else {
              console.error('Unexpected sales data format:', response.data);
              alertMsg(strings.ERROR, '서버에서 예상치 못한 응답을 받았습니다.');
            }
          }

      }

     catch (error) {
          console.log('SalesCharScreens fetchSalesData error', error);
          alertMsg(strings.ERROR, 'sales 데이터 획득 실패');
    } finally {
          setLoading(false);
    }
  };

  // 차트에 표시할 데이터를 구성합니다.
  // const chartData = salesData.map((item) => item.total_sales);

  const onPressLeft = () => {
    props.navigation.navigate('SalesMainScreen');
  };

  const LeftCustomComponent = () => {
    return (
      <TouchableOpacity onPress={onPressLeft}>
        <FontAwesome
          style={{
            height: RFPercentage(8),
            width: RFPercentage(10),
            marginTop: RFPercentage(2),
            color: colors.black,
            fontSize: RFPercentage(5),
            fontWeight: 'bold',
          }}
          name="arrow-left"
        />
      </TouchableOpacity>
    );
  };

  const chartData = useMemo(() => {  // Use useMemo here
    return salesData.map(item => ({
      value: item.total_sales,
      label: item.date,
    }));
  }, [salesData]); // Dependency array: chartData only updates when salesData changes
  

  return (
    <WrapperContainer containerStyle={{paddingHorizontal: 0}}>
      <HeaderComponent
        rightPressActive={false}
        centerText="매출 차트"
        containerStyle={{paddingHorizontal: 8}}
        isLeftView={true}
        leftCustomView={LeftCustomComponent}
        isRight={false}
      />

      {loading ? (
        <>
          <LoadingWheel />
        </>
      ) : (
        <>
          <SkiaChart ref={skiaRef} />
        </>
      )}
    </WrapperContainer>
  );
};

const styles = StyleSheet.create({
    listContainer: {
        margin: 8,
        padding: 16,
        borderWidth: 1,
        borderRadius: 10,
        backgroundColor: '#E0E0E0',
      },
      itemContainer: {
        marginBottom: 10,
      },
});

export default React.memo(SalesChartScreen);