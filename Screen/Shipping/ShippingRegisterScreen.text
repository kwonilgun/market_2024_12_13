import React, { useCallback, useContext, useRef, useState } from 'react';
import {
  Dimensions,
  Keyboard,
  Text,
  TextInput,
  ScrollView,
  StyleSheet,
  TouchableOpacity,
  View,
  Alert,
} from 'react-native';
import { useFocusEffect } from '@react-navigation/native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from 'axios';
import RNPickerSelect from 'react-native-picker-select';

import AuthGlobal from '../../../../Context/store/AuthGlobal';
import { confirmAlert } from '../../../../Shared/Alert/ConfirmAlert';
import { errorAlert } from '../../../../Shared/Alert/ErrorAlert';
import { baseURL } from '../../../../assets/common/baseUrl';
import { ToastShowFt } from '../../../../Shared/Alert/ToastShowFt';
import { asyncGetData } from '../../../../Shared/Async/AsyncStorageFt';
import { isValidPhoneNumber } from '../../../../Shared/Util/inputValidate';
import { insertDashNumber } from '../../../../Shared/Util/insertDashNumber';
import { LOG } from '../../../../Log/reactLogger';
import isEmpty from '../../../../assets/common/isEmpty';

const deliveries = require('../../../../assets/delivery.json');
const { height, width } = Dimensions.get('window');

interface Props {
  navigation: any;
}

const ShippingRegister: React.FC<Props> = (props) => {
  const context = useContext(AuthGlobal);
  const [name, setName] = useState<string>('');
  const [address1, setAddress1] = useState<string>('');
  const [address2, setAddress2] = useState<string>('');
  const [phone, setPhone] = useState<string>('');
  const [deliveryMethod, setDeliveryMethod] = useState<number | undefined>(undefined);
  const [deliveryId, setDeliveryId] = useState<string>('');
  const [checkMark, setCheckMark] = useState<boolean>(false);
  const token = useRef<string | null>(null);

  useFocusEffect(
    useCallback(() => {
      asyncGetData('deliveryInfo')
        .then((data: any) => {
          setName(data.name);
          setPhone(data.phone);
          setAddress1(data.address1);
          setAddress2(data.address2);
          setDeliveryMethod(data.deliveryMethod);
          setDeliveryId(data.deliveryId);
          setCheckMark(data.checkMark);

          AsyncStorage.getItem('jwt')
            .then((res) => {
              token.current = res;
            })
            .catch((e) => {
              LOG.info(e);
            });
        })
        .catch((e) => {
          LOG.info(e);
        });

      return () => {
        LOG.info('ShippingRegister exit');
      };
    }, [])
  );

  insertDashNumber(phone, setPhone);

  const updateDeliveryInformToServer = () => {
    if (isEmpty(name)) {
      errorAlert('Error', 'Please fill in the name field.');
      return;
    } else if (isEmpty(deliveryMethod)) {
      errorAlert('Error', 'Please select a delivery method.');
      return;
    } else if (isEmpty(address1) || isEmpty(address2)) {
      errorAlert('Error', 'Please fill in the address fields.');
      return;
    } else if (!isValidPhoneNumber(phone)) {
      errorAlert('Error', 'Invalid phone number. Use the format 010XXXXYYY.');
      return;
    }

    const deliveryInfo = {
      name,
      address1,
      address2,
      phone,
      deliveryMethod,
      user: context.stateUser.user.userId,
      deliveryId,
      checkMark,
    };

    const config = {
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        Authorization: `Bearer ${token.current}`,
      },
    };

    axios
      .post(
        `${baseURL}delivery/${context.stateUser.user.userId}`,
        JSON.stringify(deliveryInfo),
        config
      )
      .then((res) => {
        if (res.status === 200 || res.status === 201) {
          ToastShowFt('success', 'Successfully updated.');
          props.navigation.navigate('Shipping Information');
        } else if (res.status === 202) {
          ToastShowFt('success', 'This delivery address already exists.');
          props.navigation.navigate('Shipping Information');
        }
      })
      .catch((error) => {
        LOG.info(error);
        errorAlert('Error updating delivery information', error.message);
      });
  };

  const addressChange = () => {
    const addressInfo = {
      name,
      phone,
      address1,
      address2,
      deliveryMethod,
      deliveryId,
    };

    props.navigation.navigate('Shipping Post', {
      returnComponent: 'Shipping Register',
      addressInfo,
    });
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Enter Shipping Information</Text>
      <ScrollView style={styles.scrollContainer}>
        <TextInput
          style={styles.input}
          placeholder="Recipient Name"
          value={name}
          onChangeText={setName}
        />
        <TextInput
          style={styles.input}
          placeholder="Address"
          value={address1}
          onChangeText={setAddress1}
        />
        <TouchableOpacity onPress={addressChange} style={styles.searchButton}>
          <Text style={styles.buttonText}>Find Address</Text>
        </TouchableOpacity>
        <TextInput
          style={styles.input}
          placeholder="Detailed Address"
          value={address2}
          onChangeText={setAddress2}
        />
        <TextInput
          style={styles.input}
          placeholder="Phone Number"
          value={phone}
          onChangeText={setPhone}
          keyboardType="phone-pad"
        />
        <RNPickerSelect
          placeholder={{ label: 'Delivery Request', value: null }}
          value={deliveryMethod}
          onValueChange={(value) => setDeliveryMethod(value)}
          items={deliveries.map((i: any, index: number) => ({
            label: i.name,
            value: index,
          }))}
        />
        <TouchableOpacity
          onPress={() =>
            confirmAlert(
              'Confirmation',
              'Do you want to save this delivery information?',
              updateDeliveryInformToServer
            )
          }
          style={styles.saveButton}
        >
          <Text style={styles.buttonText}>Save</Text>
        </TouchableOpacity>
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
    padding: 20,
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  scrollContainer: {
    flexGrow: 1,
  },
  input: {
    height: 40,
    borderColor: '#ccc',
    borderWidth: 1,
    borderRadius: 5,
    marginBottom: 10,
    paddingHorizontal: 10,
    backgroundColor: 'white',
  },
  searchButton: {
    alignItems: 'center',
    backgroundColor: '#007bff',
    padding: 10,
    borderRadius: 5,
    marginBottom: 10,
  },
  saveButton: {
    alignItems: 'center',
    backgroundColor: '#28a745',
    padding: 10,
    borderRadius: 5,
  },
  buttonText: {
    color: 'white',
    fontWeight: 'bold',
  },
});

export default ShippingRegister;
