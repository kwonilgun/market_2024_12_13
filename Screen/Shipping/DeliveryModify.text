/*
 * File: DeliveryModify.tsx
 * Project: my-app
 * File Created: Thursday, 9th February 2023 11:33:01 am
 * Author: Kwonilgun(권일근) (kwonilgun@naver.com)
 * -----
 * Last Modified: Thursday, 9th February 2023 1:18:08 pm
 * Modified By: Kwonilgun(권일근) (kwonilgun@naver.com>)
 * -----
 * Copyright <<projectCreationYear>> - 2023 루트원 AI, 루트원 AI
 *
 * 2023-02-13 : 이전화면으로 돌아가는 것 추가: props.navigation.goBack();
 */

import React, { useContext, useRef, useCallback, useState } from 'react';
import {
  View,
  Text,
  TextInput,
  ScrollView,
  StyleSheet,
  TouchableOpacity,
  Dimensions,
  Keyboard
} from 'react-native';

import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from 'axios';
import { useFocusEffect } from '@react-navigation/native';

import AuthGlobal from '../../../../Context/store/AuthGlobal';
import { confirmAlert } from '../../../../Shared/Alert/ConfirmAlert';
import { errorAlert } from '../../../../Shared/Alert/ErrorAlert';
import { ToastShowFt } from '../../../../Shared/Alert/ToastShowFt';
import { asyncGetData } from '../../../../Shared/Async/AsyncStorageFt';
import { baseURL } from '../../../../assets/common/baseUrl';
import deliveries from '../../../../assets/delivery.json';

import { LOG } from '../../../../Log/reactLogger';
import isEmpty from '../../../../assets/common/isEmpty';
import { isValidPhoneNumber } from '../../../../Shared/Util/inputValidate';

import { LogoTitle } from '../../../../Navigators/LogoTitle';
import RNPickerSelect from 'react-native-picker-select';
import { pickerSelectStyles } from '../../../Admin/Products/ProductForm';
import { badgeStyle } from '../../../../Shared/Util/BadgeStyle';

const { height, width } = Dimensions.get('window');

type DeliveryModifyProps = {
  navigation: any;
};

const DeliveryModify: React.FC<DeliveryModifyProps> = (props) => {
  const context = useContext(AuthGlobal);

  const [name, setName] = useState<string>('');
  const [address1, setAddress1] = useState<string>('');
  const [phone, setPhone] = useState<string>('');
  const [deliveryMethod, setDeliveryMethod] = useState<number | null>(null);
  const [address2, setAddress2] = useState<string>('');
  const [deliveryId, setDeliveryId] = useState<string>('');
  const [checkMark, setCheckMark] = useState<boolean>(false);
  const token = useRef<string | null>(null);

  const scrollViewRef = useRef<ScrollView>(null);

  useFocusEffect(
    useCallback(() => {
      asyncGetData('deliveryInfo')
        .then((data) => {
          setName(data.name);
          setPhone(data.phone);
          setAddress1(data.address1);
          setAddress2(data.address2);
          setDeliveryMethod(data.deliveryMethod);
          setDeliveryId(data.deliveryId);
          setCheckMark(data.checkMark);
        })
        .catch((e) => LOG.error(e));
      return () => {
        LOG.info('DeliveryModify.tsx useFocus.. exit');
      };
    }, [])
  );

  const addressChange = addressModifyFt(
    name,
    phone,
    address1,
    address2,
    deliveryMethod,
    deliveryId,
    checkMark,
    props
  );

  const deleteDeliveryInform = async () => {
    LOG.info('DeliveryModify.tsx: Deleting delivery address');

    const token = await AsyncStorage.getItem('jwt');

    const config = {
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        Authorization: `Bearer ${token}`,
      },
    };

    axios
      .delete(
        `${baseURL}delivery/${context.stateUser.user.userId}/${deliveryId}`,
        config
      )
      .then((res) => {
        if (res.status === 200 || res.status === 201) {
          ToastShowFt('success', '배송지 정보 서버에서 삭제됨');
          props.navigation.navigate('Shipping Information', {
            screen: '배송정보',
          });
        }
      })
      .catch((err) => errorAlert('배송지 삭제 에러', '' + err));
  };

  const updateDeliveryInform = () => {
    LOG.info('Updating delivery address');

    if (isEmpty(name)) {
      errorAlert('에러', '이름 빈칸을 채워주시기 바랍니다.');
      return;
    } else if (isEmpty(deliveryMethod)) {
      errorAlert('에러', '배송시 요청 사항이 선택이 안되었습니다.');
      return;
    } else if (isEmpty(address1) || isEmpty(address2)) {
      errorAlert('에러', '주소 빈칸을 채워주시기 바랍니다.');
      return;
    } else if (!isValidPhoneNumber(phone)) {
      errorAlert(
        '에러',
        '전화번호가 유효하지 않습니다. 010XXXXYYY 형식으로 입력해 주세요'
      );
      return;
    }

    const deliveryProfile = {
      name,
      address1,
      address2,
      phone,
      deliveryMethod,
      deliveryId,
      checkMark,
    };

    const config = {
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        Authorization: `Bearer ${token.current}`,
      },
    };

    axios
      .put(
        `${baseURL}delivery/${context.stateUser.user.userId}`,
        JSON.stringify(deliveryProfile),
        config
      )
      .then((res) => {
        if (res.status === 200 || res.status === 201) {
          LOG.info('Delivery address updated, navigating back.');
          props.navigation.goBack();
        }
      })
      .catch((error) => {
        LOG.error(error);
        errorAlert('배송지 정보 업로드 실패', ' ' + error);
      });
  };

  return (
    <>
      <View>
        <LogoTitle title="루트원 마켓" backKey={true} navigation={props.navigation} />
      </View>
      <View style={{ backgroundColor: 'gray', height: height }}>
        <View style={styles.actionButtonsContainer}>
          <TouchableOpacity
            onPress={() => {
              confirmAlert(
                '최종 확인',
                ' 배송지가 추가됩니다. 진행하시겠습니까?',
                updateDeliveryInform
              );
            }}>
            {badgeStyle('저장하기', null)}
          </TouchableOpacity>
          <TouchableOpacity
            onPress={() => {
              confirmAlert(
                '최종 확인',
                ' 배송지가 삭제됩니다. 진행하시겠습니까?',
                deleteDeliveryInform
              );
            }}>
            {badgeStyle('삭제하기', null)}
          </TouchableOpacity>
        </View>

        <ScrollView
          ref={scrollViewRef}
          contentContainerStyle={styles.scrollViewContainer}>
          <Text style={styles.heading}>배송지 수정</Text>
          <TextInput
            style={styles.input}
            placeholder="이름"
            value={name}
            onChangeText={(text) => setName(text)}
          />
          <TextInput
            style={styles.input}
            placeholder="주소"
            value={address1}
            onChangeText={(text) => setAddress1(text)}
          />
          <TextInput
            style={styles.input}
            placeholder="상세주소"
            value={address2}
            onChangeText={(text) => setAddress2(text)}
          />
          <TextInput
            style={styles.input}
            placeholder="전화번호"
            value={phone}
            keyboardType="phone-pad"
            onChangeText={(text) => setPhone(text)}
          />
          <RNPickerSelect
            placeholder={{
              label: '요청 사항',
              value: null,
              color: 'black',
            }}
            value={deliveryMethod}
            style={pickerSelectStyles}
            onValueChange={(value) => setDeliveryMethod(value)}
            items={deliveries.map((item, index) => ({
              label: item.name,
              value: index,
            }))}
          />
        </ScrollView>
      </View>
    </>
  );
};

const styles = StyleSheet.create({
  actionButtonsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    padding: 10,
  },
  scrollViewContainer: {
    padding: 10,
    backgroundColor: 'white',
    borderRadius: 10,
    margin: 10,
  },
  heading: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  input: {
    borderWidth: 1,
    borderColor: 'gray',
    borderRadius: 10,
    padding: 10,
    marginBottom: 10,
  },
});

export default DeliveryModify;

export function addressModifyFt(
  name: string,
  phone: string,
  address1: string,
  address2: string,
  deliveryMethod: number | null,
  deliveryId: string,
  checkMark: boolean,
  props: DeliveryModifyProps
) {
  return () => {
    LOG.info('DeliveryModify.tsx: 우편번호 찾기 ');

    const addressInfo = {
      name,
      phone,
      address1,
      address2,
      deliveryMethod,
      deliveryId,
      checkMark,
    };

    props.navigation.navigate('Shipping Post', {
      returnComponent: 'Delivery Modify',
      addressInfo,
    });
  };
}
