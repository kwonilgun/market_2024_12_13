import React, { useCallback, useState } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  StyleSheet,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from 'axios';
import jwt_decode from 'jwt-decode'; // 로그인 유저 e-mail 추출
import { useFocusEffect } from '@react-navigation/native';
import { baseURL } from '../../assets/common/baseUrl';
import { LoadingWheel } from '../Loading/LoadingWheel';
import { LogoTitle } from '../../Navigators/LogoTitle';
import { dateToKoreaTime } from '../Time/dateToKoreaTime';
import { confirmAlert } from '../Alert/ConfirmAlert';
import { badgeStyle } from '../Util/BadgeStyle';
import { devLOGInfo } from '../debug/devLOGInfo';
import { errorAlert } from '../Alert/ErrorAlert';
import deleteOrder from './OrderDelete';
import {
  DELIVERY_DONE,
  DELIVERY_PROCESSING,
  DELIVERY_READY,
  ORDERED_PRODUCT,
  width,
} from '../../assets/common/baseValues';

type OrderedDetailProps = {
  route: {
    params: {
      item: any;
      actionFt: string | null;
    };
  };
  navigation: any;
};

const OrderedDetail: React.FC<OrderedDetailProps> = (props) => {
  const [item] = useState(props.route.params.item);
  const [loading, setLoading] = useState(true);
  const [brand, setBrand] = useState<string | undefined>();
  const [quantity, setQuantity] = useState<number | undefined>();
  const [price, setPrice] = useState<number | undefined>();
  const [total, setTotal] = useState<number | undefined>();
  const [discount, setDiscount] = useState<number | undefined>();
  const [buyerPhone, setBuyerPhone] = useState('');
  const [receiverPhone, setReceiverPhone] = useState('');
  const [orderMsg, setOrderMsg] = useState('');
  const [isProducer, setIsProducer] = useState(false);
  const [isAdmin, setIsAdmin] = useState(false);

  useFocusEffect(
    useCallback(() => {
      setBuyerPhone(item.buyerPhone.replace(/(\d{3})(\d{4})(\d{4})/, '$1-$2-$3'));
      setReceiverPhone(item.receiverPhone.replace(/(\d{3})(\d{4})(\d{4})/, '$1-$2-$3'));
      setOrderMsg(changeOrderStatusToString(item.status));

      getOrderDataFromAWS(
        item,
        setBrand,
        setQuantity,
        setPrice,
        setDiscount,
        setTotal,
        setIsProducer,
        setIsAdmin,
        setLoading
      );

      return () => {
        setLoading(true);
      };
    }, [item])
  );

  return (
    <>
      <View>
        <LogoTitle
          title="루트원 마켓"
          backKey={true}
          navigation={props.navigation}
        />
      </View>
      {loading === false ? (
        <ScrollView style={styles.scrollView} showsHorizontalScrollIndicator={false}>
          {props.route.params.actionFt === null ? null : (
            <View style={styles.actionContainer}>
              {!isProducer && !isAdmin && (
                <TouchableOpacity
                  onPress={() => {
                    if (item.status === DELIVERY_DONE) {
                      devLOGInfo('OrderedDetail: 구매후기 쓰기');
                      const inform = {
                        id: item.id,
                        orderItems: item.orderItems,
                        brand: brand,
                        quantity: quantity,
                        total: total,
                      };
                      props.navigation.navigate('WriteReview', { inform });
                    } else {
                      errorAlert('에러', '배송이 완료되지 않음, 후기를 쓸 수 없음');
                    }
                  }}
                >
                  {badgeStyle('구매후기 쓰기', null)}
                </TouchableOpacity>
              )}
              <TouchableOpacity
                onPress={() => {
                  devLOGInfo('OrderedDetail.jsx: 삭제 누름');
                  confirmAlert(
                    '최종 확인',
                    ' 주문을 삭제하시겠습니까? ',
                    props.route.params.actionFt === 'deleteOrder'
                      ? deleteOrder
                      : null,
                    item.id,
                    props
                  );
                }}
              >
                {badgeStyle('삭제', width * 0.18)}
              </TouchableOpacity>
            </View>
          )}

          <View style={styles.orderContainer}>
            <Text style={styles.heading}>주문 정보</Text>

            <View style={styles.row}>
              <Text style={styles.label}>주문 상태:</Text>
              <Text style={styles.valueError}>{orderMsg}</Text>
            </View>

            <View style={styles.row}>
              <Text style={styles.label}>상품 브랜드:</Text>
              <Text style={styles.value}>{brand}</Text>
            </View>

            <View style={styles.row}>
              <Text style={styles.label}>주문 번호:</Text>
              <Text style={styles.value}>{item.orderNumber}</Text>
            </View>

            <View style={styles.row}>
              <Text style={styles.label}>주문 시간:</Text>
              <Text style={styles.value}>{dateToKoreaTime(item.dateOrdered)}</Text>
            </View>

            <View style={styles.row}>
              <Text style={styles.label}>주문 수량(개):</Text>
              <Text style={styles.value}>{quantity}</Text>
            </View>

            <View style={styles.row}>
              <Text style={styles.label}>상품 가격(원):</Text>
              <Text style={styles.value}>{price?.toLocaleString('kr-KR')}</Text>
            </View>

            <View style={styles.row}>
              <Text style={styles.label}>할인율(%):</Text>
              <Text style={styles.value}>{discount}</Text>
            </View>

            <View style={styles.row}>
              <Text style={styles.label}>총 금액(원):</Text>
              <Text style={styles.value}>{total?.toLocaleString('kr-KR')}</Text>
            </View>

            <Text style={styles.label}>받는사람:</Text>
            <Text style={styles.value}>{item.receiverName} : {receiverPhone}</Text>

            <Text style={styles.label}>받는사람 주소:</Text>
            <Text style={styles.value}>{item.address1}</Text>
            <Text style={styles.value}>{item.address2}</Text>

            <Text style={styles.label}>구매자:</Text>
            <Text style={styles.value}>{item.buyerName} : {buyerPhone}</Text>
          </View>
        </ScrollView>
      ) : (
        <LoadingWheel />
      )}
    </>
  );
};

export default OrderedDetail;

async function getOrderDataFromAWS(
  item: any,
  setBrand: React.Dispatch<React.SetStateAction<string | undefined>>,
  setQuantity: React.Dispatch<React.SetStateAction<number | undefined>>,
  setPrice: React.Dispatch<React.SetStateAction<number | undefined>>,
  setDiscount: React.Dispatch<React.SetStateAction<number | undefined>>,
  setTotal: React.Dispatch<React.SetStateAction<number | undefined>>,
  setIsProducer: React.Dispatch<React.SetStateAction<boolean>>,
  setIsAdmin: React.Dispatch<React.SetStateAction<boolean>>,
  setLoading: React.Dispatch<React.SetStateAction<boolean>>
) {
  const token = await AsyncStorage.getItem('jwt');
  if (!token) return;

  const decoded: any = jwt_decode(token);
  setIsProducer(decoded.isProducer);
  setIsAdmin(decoded.isAdmin);

  const config = {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  };

  let orderItemId;
  item.orderItems.forEach((id: any) => {
    orderItemId = id;
  });

  try {
    const res = await axios.get(`${baseURL}orders/orderItems/${orderItemId}`, config);
    if (res.status === 200) {
      setBrand(res.data.product.brand);
      setQuantity(res.data.quantity);
      setPrice(res.data.product.price);
      setDiscount(res.data.product.discount);
      setTotal(
        res.data.product.price *
        (100 - (res.data.product.discount || 0)) *
        0.01 *
        res.data.quantity
      );
    }
  } catch (error) {
    console.error(error);
  } finally {
    setLoading(false);
  }
}

function changeOrderStatusToString(status: string): string {
  switch (status) {
    case DELIVERY_DONE:
      return '배송완료';
    case DELIVERY_PROCESSING:
      return '배송처리 중';
    case ORDERED_PRODUCT:
      return '상품 주문 중';
    case DELIVERY_READY:
      return '배송 준비 중';
    default:
      return '상태 정보 없음';
  }
}

const styles = StyleSheet.create({
  scrollView: {
    backgroundColor: '#f2f2f2',
  },
  actionContainer: {
    margin: 8,
    padding: 8,
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  orderContainer: {
    margin: 8,
    padding: 16,
    borderWidth: 1,
    borderRadius: 10,
    backgroundColor: '#f2f2f2',
  },
  heading: {
    fontWeight: 'bold',
    fontSize: 18,
    marginBottom: 10,
  },
  row: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 4,
  },
  label: {
    fontWeight: '600',
    width: 120,
  },
  value: {
    flex: 1,
    paddingLeft: 10,
  },
  valueError: {
    color: 'red',
    paddingLeft: 10,
  },
});
